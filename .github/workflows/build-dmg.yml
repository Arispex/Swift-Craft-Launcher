name: Build macOS DMG

on:
  push:
    branches: [main, master]
    tags: ['*']
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  CLIENTID: ${{ secrets.CLIENTID }}
  SPARKLE_PUBLIC_KEY: ${{ secrets.SPARKLE_PUBLIC_KEY }}

jobs:
  build:
    runs-on: macos-15
    strategy:
      matrix:
        arch: [arm64, x86_64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.3'

    - name: Show Xcode version
      run: |
        xcodebuild -version
        xcrun simctl list devices

    - name: Extract version info
      id: version
      run: |
        MARKETING_VERSION=$(awk '/\/\* Release \*\/ = {/,/};/ {if ($0 ~ /MARKETING_VERSION/) print $0}' SwiftCraftLauncher.xcodeproj/project.pbxproj | head -1 | sed 's/.*= //' | sed 's/;//')
        BUILD_VERSION=$(awk '/\/\* Release \*\/ = {/,/};/ {if ($0 ~ /CURRENT_PROJECT_VERSION/) print $0}' SwiftCraftLauncher.xcodeproj/project.pbxproj | head -1 | sed 's/.*= //' | sed 's/;//')
        
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="${MARKETING_VERSION}-${BUILD_VERSION}"
        fi

        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "marketing_version=$MARKETING_VERSION" >> $GITHUB_OUTPUT
        echo "build_version=$BUILD_VERSION" >> $GITHUB_OUTPUT

    - name: Replace Info.plist variables
      run: |
        sed -i '' "s/\$(CLIENTID)/$CLIENTID/g" SwiftCraftLauncher/Info.plist
        sed -i '' "s/\$(SPARKLE_PUBLIC_KEY)/$SPARKLE_PUBLIC_KEY/g" SwiftCraftLauncher/Info.plist
        echo "✅ Info.plist 变量替换完成"

    - name: Build app for ${{ matrix.arch }}
      run: |
        BUILD_DIR="build_${{ matrix.arch }}"
        xcodebuild -project SwiftCraftLauncher.xcodeproj \
          -scheme SwiftCraftLauncher \
          -configuration Release \
          -destination "platform=macOS,arch=${{ matrix.arch }}" \
          -derivedDataPath "$BUILD_DIR" \
          build

    - name: Verify build output
      run: |
        APP_PATH=$(find build_${{ matrix.arch }} -name "Swift Craft Launcher.app" -type d | head -1)
        if [[ -z "$APP_PATH" ]]; then
          echo "❌ 未找到构建产物"
          exit 1
        fi
        echo "✅ 应用构建成功: $APP_PATH"
        file "$APP_PATH/Contents/MacOS/Swift Craft Launcher"

    - name: Create DMG
      run: |
        APP_PATH=$(find build_${{ matrix.arch }} -name "Swift Craft Launcher.app" -type d | head -1)
        DMG_DIR="dmg_temp_${{ matrix.arch }}"
        mkdir -p "$DMG_DIR"
        cp -R "$APP_PATH" "$DMG_DIR/"
        
        DMG_NAME="Swift_Craft_Launcher_${{ matrix.arch }}_${{ steps.version.outputs.version }}.dmg"
        hdiutil create -volname "Swift Craft Launcher" -srcfolder "$DMG_DIR" -ov -format UDZO "$DMG_NAME"
        
        if [[ -f "$DMG_NAME" ]]; then
          echo "✅ DMG 创建成功: $DMG_NAME"
        else
          echo "❌ DMG 创建失败"
          exit 1
        fi

    - name: Upload DMG Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Swift-Craft-Launcher-${{ matrix.arch }}-${{ steps.version.outputs.version }}
        path: Swift_Craft_Launcher_${{ matrix.arch }}_${{ steps.version.outputs.version }}.dmg
        retention-days: 30

    - name: Clean up
      if: always()
      run: |
        rm -rf build_${{ matrix.arch }}
        rm -rf dmg_temp_${{ matrix.arch }}
        rm -f Swift_Craft_Launcher_${{ matrix.arch }}_*.dmg

  # 可选发布任务（只在 tag 推送时执行）
  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts

    - name: Display downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find release-artifacts -type f -name "*.dmg"

    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-artifacts/**/*.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
