name: Sparkle Release

on:
  workflow_run:
    workflows: ["Build macOS DMG"]
    types: [completed]
    branches: [main, master]
  workflow_dispatch:

env:
  CLIENTID: ${{ secrets.CLIENTID }}
  SPARKLE_PUBLIC_KEY: ${{ secrets.SPARKLE_PUBLIC_KEY }}

jobs:
  sparkle-release:
    runs-on: macos-15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.3'

    - name: Download build artifacts from previous workflow
      uses: actions/download-artifact@v4
      with:
        name: Swift-Craft-Launcher-arm64-*
        path: release-artifacts-arm64

    - name: Download x86_64 artifacts
      uses: actions/download-artifact@v4
      with:
        name: Swift-Craft-Launcher-x86_64-*
        path: release-artifacts-x86_64

    - name: List downloaded artifacts
      run: |
        echo "当前目录内容:"
        ls -la
        echo "release-artifacts-arm64 目录内容:"
        ls -la release-artifacts-arm64 || echo "release-artifacts-arm64 目录不存在"
        echo "release-artifacts-x86_64 目录内容:"
        ls -la release-artifacts-x86_64 || echo "release-artifacts-x86_64 目录不存在"
        echo "查找所有 DMG 文件:"
        find . -name "*.dmg" 2>/dev/null || echo "未找到 DMG 文件"

    - name: Setup Sparkle
      uses: jozefizso/setup-sparkle@v1
      with:
        version: '2.5.2'

    - name: Create private key file
      run: |
        echo '${{ secrets.SPARKLE_PRIVATE_KEY }}' > ed25519_priv.pem
        chmod 600 ed25519_priv.pem

    - name: Generate appcast for arm64
      run: |
        # 获取版本信息
        VERSION=${GITHUB_REF#refs/tags/}
        echo "版本: $VERSION"
        
        # 查找arm64 DMG文件
        echo "查找 arm64 DMG 文件..."
        ARM64_DMG=$(find . -name "*arm64*.dmg" 2>/dev/null | head -1)
        
        if [[ -z "$ARM64_DMG" ]]; then
          echo "❌ 未找到 arm64 DMG 文件"
          exit 1
        fi
        
        echo "找到的 arm64 DMG 文件: $ARM64_DMG"
        
        # 生成arm64 appcast条目
        sparkle-generate-appcast \
          --private-key ed25519_priv.pem \
          --full-installer-url "https://github.com/${{ github.repository }}/releases/download/$VERSION/$(basename $ARM64_DMG)" \
          --download-url-prefix "https://github.com/${{ github.repository }}/releases/download/$VERSION/" \
          --verbose \
          "$ARM64_DMG"
        
        # 创建arm64 appcast.xml文件
        echo '<?xml version="1.0" encoding="utf-8"?>' > appcast-arm64.xml
        echo '<rss version="2.0" xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle" xmlns:dc="http://purl.org/dc/elements/1.1/">' >> appcast-arm64.xml
        echo '    <channel>' >> appcast-arm64.xml
        echo '        <title>Swift Craft Launcher (ARM64)</title>' >> appcast-arm64.xml
        echo '        <description>Most recent updates to Swift Craft Launcher for Apple Silicon</description>' >> appcast-arm64.xml
        echo '        <language>en</language>' >> appcast-arm64.xml
        echo '        <item>' >> appcast-arm64.xml
        echo "            <title>Version $VERSION (ARM64)</title>" >> appcast-arm64.xml
        echo '            <description><![CDATA[' >> appcast-arm64.xml
        echo "                <h2>Version $VERSION (ARM64)</h2>" >> appcast-arm64.xml
        echo '                <p>New release of Swift Craft Launcher for Apple Silicon</p>' >> appcast-arm64.xml
        echo '            ]]></description>' >> appcast-arm64.xml
        echo "            <pubDate>$(date -R)</pubDate>" >> appcast-arm64.xml
        echo "            <enclosure url=\"https://github.com/${{ github.repository }}/releases/download/$VERSION/$(basename $ARM64_DMG)\"" >> appcast-arm64.xml
        echo "                       sparkle:version=\"$VERSION\"" >> appcast-arm64.xml
        echo '                       sparkle:os="macos"' >> appcast-arm64.xml
        echo '                       length="0"' >> appcast-arm64.xml
        echo '                       type="application/octet-stream"/>' >> appcast-arm64.xml
        echo '        </item>' >> appcast-arm64.xml
        echo '    </channel>' >> appcast-arm64.xml
        echo '</rss>' >> appcast-arm64.xml

    - name: Generate appcast for x86_64
      run: |
        # 获取版本信息
        VERSION=${GITHUB_REF#refs/tags/}
        echo "版本: $VERSION"
        
        # 查找x86_64 DMG文件
        echo "查找 x86_64 DMG 文件..."
        X86_64_DMG=$(find . -name "*x86_64*.dmg" 2>/dev/null | head -1)
        
        if [[ -z "$X86_64_DMG" ]]; then
          echo "❌ 未找到 x86_64 DMG 文件"
          exit 1
        fi
        
        echo "找到的 x86_64 DMG 文件: $X86_64_DMG"
        
        # 生成x86_64 appcast条目
        sparkle-generate-appcast \
          --private-key ed25519_priv.pem \
          --full-installer-url "https://github.com/${{ github.repository }}/releases/download/$VERSION/$(basename $X86_64_DMG)" \
          --download-url-prefix "https://github.com/${{ github.repository }}/releases/download/$VERSION/" \
          --verbose \
          "$X86_64_DMG"
        
        # 创建x86_64 appcast.xml文件
        echo '<?xml version="1.0" encoding="utf-8"?>' > appcast-x86_64.xml
        echo '<rss version="2.0" xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle" xmlns:dc="http://purl.org/dc/elements/1.1/">' >> appcast-x86_64.xml
        echo '    <channel>' >> appcast-x86_64.xml
        echo '        <title>Swift Craft Launcher (Intel)</title>' >> appcast-x86_64.xml
        echo '        <description>Most recent updates to Swift Craft Launcher for Intel Macs</description>' >> appcast-x86_64.xml
        echo '        <language>en</language>' >> appcast-x86_64.xml
        echo '        <item>' >> appcast-x86_64.xml
        echo "            <title>Version $VERSION (Intel)</title>" >> appcast-x86_64.xml
        echo '            <description><![CDATA[' >> appcast-x86_64.xml
        echo "                <h2>Version $VERSION (Intel)</h2>" >> appcast-x86_64.xml
        echo '                <p>New release of Swift Craft Launcher for Intel Macs</p>' >> appcast-x86_64.xml
        echo '            ]]></description>' >> appcast-x86_64.xml
        echo "            <pubDate>$(date -R)</pubDate>" >> appcast-x86_64.xml
        echo "            <enclosure url=\"https://github.com/${{ github.repository }}/releases/download/$VERSION/$(basename $X86_64_DMG)\"" >> appcast-x86_64.xml
        echo "                       sparkle:version=\"$VERSION\"" >> appcast-x86_64.xml
        echo '                       sparkle:os="macos"' >> appcast-x86_64.xml
        echo '                       length="0"' >> appcast-x86_64.xml
        echo '                       type="application/octet-stream"/>' >> appcast-x86_64.xml
        echo '        </item>' >> appcast-x86_64.xml
        echo '    </channel>' >> appcast-x86_64.xml
        echo '</rss>' >> appcast-x86_64.xml

    - name: Upload appcast files
      uses: actions/upload-artifact@v4
      with:
        name: appcast-files
        path: |
          appcast-arm64.xml
          appcast-x86_64.xml
        retention-days: 30

    - name: Update GitHub Release with appcast files
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        
        # 获取release ID
        RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/$VERSION --jq '.id')
        
        # 上传arm64 appcast.xml到release
        if [[ -f appcast-arm64.xml ]]; then
          gh api repos/${{ github.repository }}/releases/$RELEASE_ID/assets \
            -F name=appcast-arm64.xml \
            -F label="Appcast XML (ARM64)" \
            -F "file=@appcast-arm64.xml"
        fi
        
        # 上传x86_64 appcast.xml到release
        if [[ -f appcast-x86_64.xml ]]; then
          gh api repos/${{ github.repository }}/releases/$RELEASE_ID/assets \
            -F name=appcast-x86_64.xml \
            -F label="Appcast XML (Intel)" \
            -F "file=@appcast-x86_64.xml"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 