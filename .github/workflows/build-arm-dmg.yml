name: Build ARM DMG

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.3'
        
    - name: Show Xcode version
      run: |
        xcodebuild -version
        xcrun simctl list devices
        
    - name: List available schemes
      run: |
        echo "可用的schemes:"
        xcodebuild -project SwiftCraftLauncher.xcodeproj -list
        
    - name: Extract version info
      id: version
      run: |
        echo "提取版本信息..."
        MARKETING_VERSION=$(awk '/\/\* Release \*\/ = {/,/};/ {if ($0 ~ /MARKETING_VERSION/) print $0}' SwiftCraftLauncher.xcodeproj/project.pbxproj | head -1 | sed 's/.*= //' | sed 's/;//')
        CURRENT_PROJECT_VERSION=$(awk '/\/\* Release \*\/ = {/,/};/ {if ($0 ~ /CURRENT_PROJECT_VERSION/) print $0}' SwiftCraftLauncher.xcodeproj/project.pbxproj | head -1 | sed 's/.*= //' | sed 's/;//')
        echo "Release Marketing Version: $MARKETING_VERSION"
        echo "Release Current Project Version: $CURRENT_PROJECT_VERSION"
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          echo "使用Git tag版本: $VERSION"
        else
          VERSION="${MARKETING_VERSION}-${CURRENT_PROJECT_VERSION}"
          echo "使用Release版本: $VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "marketing_version=$MARKETING_VERSION" >> $GITHUB_OUTPUT
        echo "build_version=$CURRENT_PROJECT_VERSION" >> $GITHUB_OUTPUT
        
    - name: Build for ARM
      run: |
        echo "开始构建ARM架构版本..."
        xcodebuild -project SwiftCraftLauncher.xcodeproj \
          -scheme SwiftCraftLauncher \
          -configuration Release \
          -destination 'platform=macOS,arch=arm64' \
          -derivedDataPath build \
          build
          
    - name: Debug build output
      run: |
        echo "检查构建输出目录结构..."
        find build -name "*.app" -type d 2>/dev/null || echo "未找到.app文件"
        ls -la build/ 2>/dev/null || echo "build目录不存在"
        ls -la build/Build/ 2>/dev/null || echo "build/Build目录不存在"
        ls -la build/Build/Products/ 2>/dev/null || echo "build/Build/Products目录不存在"
        ls -la build/Build/Products/Release/ 2>/dev/null || echo "build/Build/Products/Release目录不存在"
        
    - name: Verify build output
      run: |
        echo "检查构建输出..."
        
        # 查找构建的应用文件
        APP_PATH=$(find build -name "Swift Craft Launcher.app" -type d 2>/dev/null | head -1)
        
        if [ -n "$APP_PATH" ] && [ -d "$APP_PATH" ]; then
          echo "✅ 应用构建成功，位置: $APP_PATH"
          file "$APP_PATH/Contents/MacOS/Swift Craft Launcher"
        else
          echo "❌ 应用构建失败，未找到应用文件"
          echo "构建目录内容:"
          find build -type f -name "*.app" 2>/dev/null || echo "未找到任何.app文件"
          exit 1
        fi
        
    - name: Create DMG
      run: |
        echo "开始创建DMG文件..."
        
        # 查找构建的应用文件
        APP_PATH=$(find build -name "Swift Craft Launcher.app" -type d 2>/dev/null | head -1)
        
        if [ -z "$APP_PATH" ]; then
          echo "❌ 未找到应用文件，无法创建DMG"
          exit 1
        fi
        
        # 创建临时目录
        mkdir -p dmg_temp
        
        # 复制应用到临时目录
        cp -R "$APP_PATH" dmg_temp/
        
        # 使用版本信息命名DMG文件
        DMG_NAME="Swift_Craft_Launcher_ARM_v${{ steps.version.outputs.version }}.dmg"
        echo "DMG文件名: $DMG_NAME"
        
        # 创建DMG
        hdiutil create -volname "Swift Craft Launcher" -srcfolder dmg_temp -ov -format UDZO "$DMG_NAME"
        
        # 验证DMG文件
        if [ -f "$DMG_NAME" ]; then
          echo "✅ DMG文件创建成功"
          ls -lh "$DMG_NAME"
        else
          echo "❌ DMG文件创建失败"
          exit 1
        fi
        
    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: Swift-Craft-Launcher-ARM-v${{ steps.version.outputs.version }}
        path: Swift_Craft_Launcher_ARM_v${{ steps.version.outputs.version }}.dmg
        retention-days: 30
        
    - name: Build for x86
      run: |
        echo "开始构建x86架构版本..."
        xcodebuild -project SwiftCraftLauncher.xcodeproj \
          -scheme SwiftCraftLauncher \
          -configuration Release \
          -destination 'platform=macOS,arch=x86_64' \
          -derivedDataPath build_x86 \
          build

    - name: Debug build_x86 output
      run: |
        echo "检查x86构建输出目录结构..."
        find build_x86 -name "*.app" -type d 2>/dev/null || echo "未找到.app文件"
        ls -la build_x86/ 2>/dev/null || echo "build_x86目录不存在"
        ls -la build_x86/Build/ 2>/dev/null || echo "build_x86/Build目录不存在"
        ls -la build_x86/Build/Products/ 2>/dev/null || echo "build_x86/Build/Products目录不存在"
        ls -la build_x86/Build/Products/Release/ 2>/dev/null || echo "build_x86/Build/Products/Release目录不存在"

    - name: Verify build_x86 output
      run: |
        echo "检查x86构建输出..."
        APP_PATH_X86=$(find build_x86 -name "Swift Craft Launcher.app" -type d 2>/dev/null | head -1)
        if [ -n "$APP_PATH_X86" ] && [ -d "$APP_PATH_X86" ]; then
          echo "✅ x86应用构建成功，位置: $APP_PATH_X86"
          file "$APP_PATH_X86/Contents/MacOS/Swift Craft Launcher"
        else
          echo "❌ x86应用构建失败，未找到应用文件"
          echo "构建目录内容:"
          find build_x86 -type f -name "*.app" 2>/dev/null || echo "未找到任何.app文件"
          exit 1
        fi

    - name: Create x86 DMG
      run: |
        echo "开始创建x86 DMG文件..."
        APP_PATH_X86=$(find build_x86 -name "Swift Craft Launcher.app" -type d 2>/dev/null | head -1)
        if [ -z "$APP_PATH_X86" ]; then
          echo "❌ 未找到x86应用文件，无法创建DMG"
          exit 1
        fi
        mkdir -p dmg_temp_x86
        cp -R "$APP_PATH_X86" dmg_temp_x86/
        DMG_NAME_X86="Swift_Craft_Launcher_x86_v${{ steps.version.outputs.version }}.dmg"
        echo "x86 DMG文件名: $DMG_NAME_X86"
        hdiutil create -volname "Swift Craft Launcher" -srcfolder dmg_temp_x86 -ov -format UDZO "$DMG_NAME_X86"
        if [ -f "$DMG_NAME_X86" ]; then
          echo "✅ x86 DMG文件创建成功"
          ls -lh "$DMG_NAME_X86"
        else
          echo "❌ x86 DMG文件创建失败"
          exit 1
        fi

    - name: Upload x86 DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: Swift-Craft-Launcher-x86-v${{ steps.version.outputs.version }}
        path: Swift_Craft_Launcher_x86_v${{ steps.version.outputs.version }}.dmg
        retention-days: 30

    # - name: Create Release
    #   if: startsWith(github.ref, 'refs/tags/')
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: Swift Craft Launcher ${{ steps.version.outputs.version }}
    #     body: |
    #       ## Swift Craft Launcher ${{ steps.version.outputs.version }}
    #       
    #       ### 构建信息
    #       - **版本**: ${{ steps.version.outputs.marketing_version }}
    #       - **构建号**: ${{ steps.version.outputs.build_version }}
    #       - **架构**: ARM64 (Apple Silicon)
    #       - **平台**: macOS
    #       
    #       ### 下载
    #       - [Swift_Craft_Launcher_ARM_v${{ steps.version.outputs.version }}.dmg](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Swift_Craft_Launcher_ARM_v${{ steps.version.outputs.version }}.dmg)
    #       
    #     draft: false
    #     prerelease: false
        
    # - name: Upload Release Asset
    #   if: startsWith(github.ref, 'refs/tags/')
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./Swift_Craft_Launcher_ARM_v${{ steps.version.outputs.version }}.dmg
    #     asset_name: Swift_Craft_Launcher_ARM_v${{ steps.version.outputs.version }}.dmg
    #     asset_content_type: application/octet-stream
        
    - name: Clean up
      if: always()
      run: |
        echo "清理临时文件..."
        rm -rf build
        rm -rf dmg_temp
        rm -f Swift_Craft_Launcher_ARM_v*.dmg
        rm -rf build_x86
        rm -rf dmg_temp_x86
        rm -f Swift_Craft_Launcher_x86_v*.dmg
